'''
下载 股票代码-中文名称 表
'''
df = get_all_securities('stock')
df = df.drop(['start_date','end_date','exchange','type','benchmark','name','parent','round_lot','underlying_symbol'],axis=1)
df.to_csv('CodeName.csv')

'''
下载 主要指标 表
'''
import numpy as np 
# ashareprofit.roic_ttm 会有很多缺少
list_days = []
for year in list(range(2005,2010)):
    for season in list(range(1,5)):
        list_days.append(str(year) + 'q' + str(season))
#获取数据
q = query(income.symbol,income.date,income.report_date,income.profit_from_operations,cashflow.net_cash_flows_from_opt_act,profit_sq.roe,growth_sq.opt_profit_growth_ratio,
         cashflow.net_cash_flows_from_opt_act,cashflow.cash_paid_for_assets,income.basic_eps)
df = get_fundamentals(q, list_days)
#q2 = query(ashareprofit.roic_ttm)
#df2 = get_fundamentals(q2, list_days)
df['symbol'] = df['income_symbol']
df['date'] = df['income_date']
df['date_repo'] = df['income_report_date']
df['profit_from_operations'] = df['income_profit_from_operations']
df['net_cash_flows_from_opt_act'] = df['cashflow_net_cash_flows_from_opt_act']
df['roe'] = df['profit_sq_roe']
df['opt_profit_growth_ratio'] = df['growth_sq_opt_profit_growth_ratio']
df['NmC'] = df['cashflow_net_cash_flows_from_opt_act'] - df['cashflow_cash_paid_for_assets']
df['basic_eps'] = df['income_basic_eps']
#df['roic_ttm'] = df2['ashareprofit_roic_ttm']

df = df.drop(['income_symbol','income_date','income_report_date','income_profit_from_operations','cashflow_net_cash_flows_from_opt_act','profit_sq_roe',
             'growth_sq_opt_profit_growth_ratio','cashflow_net_cash_flows_from_opt_act','cashflow_cash_paid_for_assets','income_basic_eps'],axis=1)
#计算均值方差
for s in list(get_all_securities('stock','20151010').index):
    tdf = df.loc[df['symbol'] == s]
    for a in list(df.loc[df['symbol'] == s].index):
        df.iloc[a]['roe_ave'] = np.mean(tdf['roe'])

print(df)
#df.to_csv('MainDG.csv',index=False)


'''
下载 现金流量 表
'''
list_days = []
for year in list(range(2005,2020)):
    for season in list(range(1,5)):
        list_days.append(str(year) + 'q' + str(season))
#获取数据
q = query(cashflow.symbol,cashflow.date,cashflow.report_date,cashflow.cash_received_from_sales,cashflow.receipts_of_tax_refunds,cashflow.other_cash_received_from_op_act,cashflow.sub_total_of_ci_from_oa,
         cashflow.employees_cash_payments,cashflow.payments_of_taxes,cashflow.other_cash_paid_related_to_oa,
         cashflow.sub_total_of_cos_from_oa,
         cashflow.net_cash_flows_from_opt_act,
         cashflow.cash_received_of_dspsl_invest,
         cashflow.investment_income_cash,
         cashflow.net_cash_received_from_disposals,
         cashflow.net_cash_of_disposal_branch,
         cashflow.cash_received_of_other_fa,
         cashflow.sub_total_of_ci_from_ia,
         cashflow.cash_paid_for_assets,
         cashflow.invest_paid_cash,
         cashflow.net_cash_amt_from_branch,
         cashflow.other_cash_paid_related_to_ia,
         cashflow.sub_total_of_cos_fromia,
         cashflow.net_cashflows_from_investing_act,
         cashflow.cash_received_from_investors,
         cashflow.cr_from_minority_holders,
         cashflow.cash_received_from_borrowings,
         cashflow.cash_received_of_othr_fa,
         cashflow.sub_total_of_ci_from_fa,
         cashflow.cash_pay_for_debt,
         cashflow.cash_paid_of_distribution,
         cashflow.dap_paid_to_minority_holder,
         cashflow.othrcash_paid_relating_to_fa,
         cashflow.sub_total_of_cos_from_fa,
         cashflow.ncf_from_fa,
         cashflow.effect_of_exchange_chg_on_cce,
         cashflow.net_increase_in_cce,
         cashflow.initial_balance_of_cce,
         cashflow.cash_and_cash_equivalents_at_end,
         cashflow.net_profit,
         cashflow.reserve_for_assets_impairment,
         cashflow.depreciation_etc,
         cashflow.intangible_assets,
         cashflow.long_term_deferred_expenses,
         cashflow.disposal_of_fixed_assets_loss,
         cashflow.fixed_asset_abnd_loss,
         cashflow.financing_expenses,
         cashflow.investment_loss,
         cashflow.dt_assets_decrease,
         cashflow.dt_liab_increase,
         cashflow.inventory_reduction,
         cashflow.operating_receivables_reduction,
         cashflow.operating_payable_increase,
         cashflow.other,
         cashflow.net_cashflows_from_operating_act,
         cashflow.cash_at_end_of_year,
         cashflow.minus_cash_at_beginning_of_year,
         cashflow.net_increase_in_cce_im)
df = get_fundamentals(q, list_days)
df.columns = df.columns.str.replace('cashflow_',"")

df.to_csv('cashflow.csv',index=False)
print("ACC")


'''
下载 资产负债表 表
'''
list_days = []
for year in list(range(2005,2020)):
    for season in list(range(1,5)):
        list_days.append(str(year) + 'q' + str(season))
#获取数据
q = query(balance.symbol,balance.date,balance.report_date,
         balance.cash,
         balance.notes_receivable,
         balance.accounts_receivable,
         balance.advance_payment,
         balance.interest_receivable,
         balance.receivable_other,
         balance.inventory,
         balance.noncurrent_asset_due_within1y,
         balance.other_current_assets,
         balance.total_current_assets,
         balance.available_financial_assets,
         balance.long_term_equity_investment,
         balance.investment_property,
         balance.fixed_asset,
         balance.cip_project,
         balance.intangible_assets,
         balance.goodwill,
         balance.long_term_prepaid_expenses,
         balance.deferred_tax_assets,
         balance.other_non_current_assets,
         balance.total_non_current_assets,
         balance.short_term_loan,
         balance.notes_payable,
         balance.account_payable,
         balance.deposit_received,
         balance.accrued_wages,
         balance.taxes_and_dues,
         balance.other_payable,
         balance.interest_payable,
         balance.dividend_payable,
         balance.noncurrent_liab_due_in1y,
         balance.other_current_liability,
         balance.current_liabilities,
         balance.long_term_loan,
         balance.deferred_tax_liability,
         balance.other_non_current_liabilities,
         balance.totalnon_current_liabilities,
         balance.total_liabilities,
         balance.equity,
         balance.capital_reserve,
         balance.other_consolidated_income)
df = get_fundamentals(q, list_days)
df.columns = df.columns.str.replace('balance_',"")

df.to_csv('balance.csv',index=False)
print("ACC")


'''
下载 利润表
'''
list_days = []
for year in list(range(2005,2020)):
    for season in list(range(1,5)):
        list_days.append(str(year) + 'q' + str(season))
#获取数据
q = query(income.symbol,income.date,income.report_date,
         income.overall_income,
         income.operating_income,
         income.overall_costs,
         income.operations_costs,
         income.operations_taxes_and_surcharges,
         income.sales_fee,
         income.manage_fee,
         income.financial_expenses,
         income.interests_income,
         income.impairment_loss_on_assets,
         income.investment_income,
         income.ii_from_jc_etc,
         income.profit_from_operations,
         income.non_operating_profit,
         income_sq.noncurrent_assets_dispose_gain,
         income_sq.non_operating_expenses,
         income_sq.noncurrent_asset_disposal_loss,
         income_sq.profit_before_tax,
         income_sq.minus_income_tax_expenses,
         income_sq.net_profit,
         income_sq.np_atsopc,
         income_sq.minority_interest_income,
         income_sq.basic_eps,
         income_sq.diluted_eps,
         income_sq.total_compre_income_atsopc,
         income_sq.total_compre_income_atms)
df = get_fundamentals(q, list_days)
df.columns = df.columns.str.replace('income_sq_',"")
df.columns = df.columns.str.replace('income_',"")

df.to_csv('income.csv',index=False)
print("ACC")



'''
下载 综合信息（母公司部分）
'''
#XSHE->SZ
#XSHG->SH

from jqdata import finance
import pandas
import datetime
print("BG")
list_stock = list(get_all_securities().index)
list_days = []
for year in list(range(2005,2020)):
    for month in [3,4,6,7,9,10,12,1]:
        for day in list(range(20,31)):
            list_days.append(datetime.date(year,month,day))
            list_days.append(datetime.date(year,month,31-day))
df_out = pandas.DataFrame(columns=['code','pub_date','report_date','other_receivable','advance_payment','total_assets'])
for s in list_stock:
    df = finance.run_query(query(finance.STK_BALANCE_SHEET_PARENT.code,
                       finance.STK_BALANCE_SHEET_PARENT.pub_date,
                       finance.STK_BALANCE_SHEET_PARENT.report_date,
                       finance.STK_BALANCE_SHEET_PARENT.other_receivable,
                       finance.STK_BALANCE_SHEET_PARENT.advance_payment,
                       finance.STK_BALANCE_SHEET_PARENT.total_assets).filter(finance.STK_BALANCE_SHEET_PARENT.code==s).order_by(
        finance.STK_BALANCE_SHEET_PARENT.pub_date))
    df_out = pandas.concat([df_out,df[df['pub_date'].isin(list_days)]])
df_out.columns = ['symbol','date','date_repo','other_receivableA','advance_paymentA','total_assetsA']

df_out.to_csv('LotsofInfoA.csv',index=False)
print("ACC")